{
  
    
        "post0": {
            "title": "COVID-19の日本の状況を中心に可視化1",
            "content": "&#26481;&#20140;&#32076;&#28168;&#12288;&#26032;&#22411;&#12467;&#12525;&#12490;&#12454;&#12452;&#12523;&#12473;&#22269;&#20869;&#24863;&#26579;&#12398;&#29366;&#27841; . https://github.com/kaz-ogiwara/covid19/blob/master/data/individuals.csv . import pandas as pd import altair as alt import requests import io URL = &quot;https://raw.githubusercontent.com/kaz-ogiwara/covid19/master/data/individuals.csv&quot; r = requests.get(URL) df = pd.read_csv(io.BytesIO(r.content), sep=&quot;,&quot;) df = df.drop(0).replace(&#39;代&#39;, &#39;&#39;, regex=True) df[&#39;date&#39;] = df[&#39;確定年&#39;].astype(str) + &#39;-&#39; + df[&#39;確定月&#39;].astype(str) + &#39;-&#39; + df[&#39;確定日&#39;].astype(str) df . 新No. 旧No. 確定年 確定月 確定日 年代 性別 居住地1 居住地2 date . 1 2 | 2 | 2020 | 1 | 24 | 40 | 男 | 中国（武漢市） | NaN | 2020-1-24 | . 2 3 | 3 | 2020 | 1 | 25 | 30 | 女 | 中国（武漢市） | NaN | 2020-1-25 | . 3 4 | 4 | 2020 | 1 | 26 | 40 | 男 | 中国（武漢市） | NaN | 2020-1-26 | . 4 5 | 5 | 2020 | 1 | 28 | 40 | 男 | 中国（武漢市） | NaN | 2020-1-28 | . 5 6 | 6 | 2020 | 1 | 28 | 60 | 男 | 奈良県 | NaN | 2020-1-28 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 930 931 | 942 | 2020 | 3 | 22 | 20 | 男 | 埼玉県 | NaN | 2020-3-22 | . 931 932 | 943 | 2020 | 3 | 22 | 60 | 男 | 神奈川県 | 川崎市 | 2020-3-22 | . 932 933 | 944 | 2020 | 3 | 22 | 30 | 女 | 神奈川県 | 川崎市 | 2020-3-22 | . 933 934 | 945 | 2020 | 3 | 22 | 20 | 男 | 岐阜県 | NaN | 2020-3-22 | . 934 935 | 946 | 2020 | 3 | 22 | 70 | 男 | 岐阜県 | NaN | 2020-3-22 | . 934 rows × 10 columns . alt.Chart(df).mark_line().encode( alt.X(&quot;date&quot;), y=&#39;count()&#39;, ) . df2 = df[[&#39;居住地1&#39;]] df2[&#39;date&#39;] = pd.to_datetime(df[&#39;date&#39;]) df2 = df2.set_index(&#39;date&#39;) df2 = df2.resample(&#39;1D&#39;).count() df2[&#39;date&#39;] = df2.index df2 . 居住地1 date . date . 2020-01-24 1 | 2020-01-24 | . 2020-01-25 1 | 2020-01-25 | . 2020-01-26 1 | 2020-01-26 | . 2020-01-27 0 | 2020-01-27 | . 2020-01-28 3 | 2020-01-28 | . 2020-01-29 1 | 2020-01-29 | . 2020-01-30 3 | 2020-01-30 | . 2020-01-31 1 | 2020-01-31 | . 2020-02-01 0 | 2020-02-01 | . 2020-02-02 0 | 2020-02-02 | . 2020-02-03 0 | 2020-02-03 | . 2020-02-04 2 | 2020-02-04 | . 2020-02-05 2 | 2020-02-05 | . 2020-02-06 0 | 2020-02-06 | . 2020-02-07 0 | 2020-02-07 | . 2020-02-08 0 | 2020-02-08 | . 2020-02-09 0 | 2020-02-09 | . 2020-02-10 0 | 2020-02-10 | . 2020-02-11 1 | 2020-02-11 | . 2020-02-12 0 | 2020-02-12 | . 2020-02-13 4 | 2020-02-13 | . 2020-02-14 9 | 2020-02-14 | . 2020-02-15 4 | 2020-02-15 | . 2020-02-16 4 | 2020-02-16 | . 2020-02-17 6 | 2020-02-17 | . 2020-02-18 8 | 2020-02-18 | . 2020-02-19 8 | 2020-02-19 | . 2020-02-20 9 | 2020-02-20 | . 2020-02-21 13 | 2020-02-21 | . 2020-02-22 24 | 2020-02-22 | . 2020-02-23 11 | 2020-02-23 | . 2020-02-24 11 | 2020-02-24 | . 2020-02-25 16 | 2020-02-25 | . 2020-02-26 12 | 2020-02-26 | . 2020-02-27 24 | 2020-02-27 | . 2020-02-28 18 | 2020-02-28 | . 2020-02-29 8 | 2020-02-29 | . 2020-03-01 15 | 2020-03-01 | . 2020-03-02 9 | 2020-03-02 | . 2020-03-03 17 | 2020-03-03 | . 2020-03-04 30 | 2020-03-04 | . 2020-03-05 25 | 2020-03-05 | . 2020-03-06 53 | 2020-03-06 | . 2020-03-07 42 | 2020-03-07 | . 2020-03-08 30 | 2020-03-08 | . 2020-03-09 19 | 2020-03-09 | . 2020-03-10 46 | 2020-03-10 | . 2020-03-11 49 | 2020-03-11 | . 2020-03-12 49 | 2020-03-12 | . 2020-03-13 38 | 2020-03-13 | . 2020-03-14 52 | 2020-03-14 | . 2020-03-15 22 | 2020-03-15 | . 2020-03-16 13 | 2020-03-16 | . 2020-03-17 39 | 2020-03-17 | . 2020-03-18 35 | 2020-03-18 | . 2020-03-19 35 | 2020-03-19 | . 2020-03-20 42 | 2020-03-20 | . 2020-03-21 32 | 2020-03-21 | . 2020-03-22 37 | 2020-03-22 | . alt.Chart(df2).mark_bar().encode( x=&#39;date:T&#39;, y=&#39;居住地1:Q&#39;, ) . alt.Chart(df).mark_bar().encode( alt.X(&quot;年代&quot;, bin=True), y=&#39;count()&#39;, ) . alt.Chart(df).mark_bar().encode( alt.X(&quot;性別&quot;), y=&#39;count()&#39;, ) .",
            "url": "https://geeknees.github.io/fastpages/jupyter/covid-19/2020/03/23/COVID-19-JAPAN.html",
            "relUrl": "/jupyter/covid-19/2020/03/23/COVID-19-JAPAN.html",
            "date": " • Mar 23, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages で Notebook を使ったポスト（和訳）",
            "content": "&#27010;&#35201; . このノートブックは fastpages を使った notebooks のデモンストレーション用です。 . fastpages を使えば、自身の jupyter notebooks を自分のレポジトリにの中の _notebooks フォルダーに保存するだけで、自動的に Jekyll がブログポストに変換してくれます! . &#21069;&#20184;&#12369; . Jupyter Notebook や markdown のポストの最初のセルは前付けになります。前付けは Notebook のオプションのON／OFFを切り替えます。下記のフォーマットのように記入できます: . # タイトル &gt; Awesome な要約 - toc: true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . toc: true の設定は自動的にテーブルコンテンツを追加します | badges: true の設定は自動的に GitHub や Google Colab のリンクを追加します | comments: true の設定はコメント機能を追加します。コメント機能は utterances を使います。 | . より詳細な情報は front matter section of の README から確認できます。 . Markdown &#12398;&#12471;&#12519;&#12540;&#12488;&#12459;&#12483;&#12488; . #hide コメントをコードセルの一番上に記載すると input と output の両方を隠すことができます。 . #hide_input は input だけ 非表示にすることができます。 . コードを非表示にするため #hide_input が使われ、この文字が表示されています . #collapse-hide をコードセルにの一番上に記載すると、デフォルトで 非表示 になりますが、読者に表示させる選択肢が与えられます: . #collapse-hide import pandas as pd import altair as alt . . #collapse-show をコードセルにの一番上に記載すると、デフォルトで 表示 になりますが、読者に非表示にさせる選択肢が与えられます: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Altair &#12434;&#20351;&#12387;&#12383;&#12452;&#12531;&#12479;&#12521;&#12463;&#12486;&#12451;&#12502;&#12394;&#12481;&#12515;&#12540;&#12488; . Altair は使ったチャートはインタラクティブに操作できます。例えばこちらの this repo 、 特に this notebook などです。 . Example 1: &#12489;&#12525;&#12483;&#12503;&#12480;&#12454;&#12531; . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: ツールチップ . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: &#12373;&#12425;&#12395;&#12484;&#12540;&#12523;&#12481;&#12483;&#12503; . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . &#12487;&#12540;&#12479;&#12486;&#12540;&#12502;&#12523; . 普段どおりデータテーブルもブログに表示することができます: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . &#30011;&#20687; . &#12525;&#12540;&#12459;&#12523;&#12395;&#12354;&#12427;&#30011;&#20687; . ローカル画像を参照することができ、その画像は自動的にブログにコピーされます。下記のマークダウン記法で画像を表示することができます: . ![](my_icons/fastai_logo.png) . . &#12522;&#12514;&#12540;&#12488;&#12395;&#12354;&#12427;&#30011;&#20687; . リモートにある画像は下記のマークダウン記法で表示することができます: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . &#12450;&#12491;&#12513;&#12540;&#12471;&#12519;&#12531; Gif . アニメーション Gif も動作します! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . &#12461;&#12515;&#12503;&#12471;&#12519;&#12531; . 下記のようなマークダウン記法でキャプションも追加することができます： . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . &#12381;&#12398;&#20182; . Tweetcards . &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 のように書くと下記のようになります: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . &gt; youtube: https://youtu.be/XfoYk_Z5AkI のように書くと下記のようになります: . Boxes / Callouts . &gt; Warning: There will be no second warning! のように書くと下記のようになります: . Warning: There will be no second warning! . &gt; Important: Pay attention! It&#39;s important. のように書くと下記のようになります: . Important: Pay attention! It&#8217;s important. . &gt; Tip: This is my tip. のように書くと下記のようになります: . Tip: This is my tip. &gt; Note: Take note of this. のように書くと下記のようになります: . Note: Take note of this. . &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. のように書くと下記のようになります: . Note: A doc link to an example website: fast.ai should also work fine. . &#33050;&#27880; . 脚注を書くことができますが、マークダウン記法とはことなります。 このガイドが記法についての詳細を記載しています、下記のようになります: . これが脚注です {% fn 1 %}. 別の脚注です {% fn 2 %} {{ &#39;脚注の詳細です.&#39; | fndetail: 1 }} {{ &#39;別の脚注の詳細です。[link](www.github.com)を使用することもできます!&#39; | fndetail: 2 }} . これが脚注です 1. 別の脚注です 2 1. 脚注の詳細です.↩ . 2. 別の脚注の詳細です。linkを使用することもできます!↩ .",
            "url": "https://geeknees.github.io/fastpages/jupyter/2020/03/22/first.html",
            "relUrl": "/jupyter/2020/03/22/first.html",
            "date": " • Mar 22, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Markdownを使った投稿の例（和訳）",
            "content": "Markdown を使った投稿の例（和訳） . 基本設定 . Jekyll は下記のフォーマットで投稿する必要があります: . YEAR-MONTH-DAY-filename.md . YEARは 4 桁の数字、MONTH と DAY は２桁の数字、 filename はどのようなフォーマットでも構いません。どのような内容かわかるものを記載してください。 末尾に .md の拡張子を追加してください。 . ファルの最初の行は１つのハッシュ（シャープ）で始める必要があります。その後スペースを一ついれて、タイトルを記載してください。これはレベル１のヘッダーテキストを記載する方法です。ハッシュの数を増やすことで、上記の ## 基本の設定 のようにレベル２，３と変えることができます。 . 基本フォーマット . イタリック, 太字, コーテキスト, リンクを書くことができます。脚注は 1 のように書きます。水平線は下記のように書きます。: . . リスト . これはリストです: . item 1 | item 2 | . 番号付きリストです: . item 1 | item 2 | ボックス . これは引用です . . アラートボックスに記入 や . . インフォボックスに記入 もできます。 . 画像 . . コード . 通常通りにコードを書くこともできます。 . 一般的なフォーマットされていないテキスト: . # Do a thing do_thing() . Python のコードとその出力: . # Prints &#39;2&#39; print(1+1) . 2 . shell コマンドとその出力: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . YAML 形式で書かれたテキスト: . key: value - another_key: &quot;another value&quot; . テーブル . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 脚注 . これが脚注です。 &#8617; . |",
            "url": "https://geeknees.github.io/fastpages/markdown/2020/03/22/first-markdwon-post.html",
            "relUrl": "/markdown/2020/03/22/first-markdwon-post.html",
            "date": " • Mar 22, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "COVID-19のTOKYOの状況を中心に可視化1",
            "content": "&#26481;&#20140;&#37117; &#26032;&#22411;&#12467;&#12525;&#12490;&#12454;&#12452;&#12523;&#12473;&#38525;&#24615;&#24739;&#32773;&#30330;&#34920;&#35443;&#32048; . https://catalog.data.metro.tokyo.lg.jp/dataset/t000010d0000000068 . import pandas as pd import altair as alt import requests import io URL = &quot;https://stopcovid19.metro.tokyo.lg.jp/data/130001_tokyo_covid19_patients.csv&quot; r = requests.get(URL) df = pd.read_csv(io.BytesIO(r.content), sep=&quot;,&quot;) df = df.drop(0).replace(&#39;代&#39;, &#39;&#39;, regex=True) df . No 全国地方公共団体コード 都道府県名 市区町村名 公表_年月日 曜日 発症_年月日 居住地 年代 性別 患者_属性 患者_状態 患者_症状 患者_渡航歴の有無フラグ 備考 退院済フラグ . 1 1.0 | 130001 | 東京都 | NaN | 2020-01-24 | 金 | NaN | 湖北省武漢市 | 40 | 男性 | NaN | NaN | NaN | NaN | NaN | 1.0 | . 2 2.0 | 130001 | 東京都 | NaN | 2020-01-25 | 土 | NaN | 湖北省武漢市 | 30 | 女性 | NaN | NaN | NaN | NaN | NaN | 1.0 | . 3 3.0 | 130001 | 東京都 | NaN | 2020-01-30 | 木 | NaN | 湖南省長沙市 | 30 | 女性 | NaN | NaN | NaN | NaN | NaN | 1.0 | . 4 4.0 | 130001 | 東京都 | NaN | 2020-02-13 | 木 | NaN | 都内 | 70 | 男性 | NaN | NaN | NaN | NaN | NaN | NaN | . 5 5.0 | 130001 | 東京都 | NaN | 2020-02-14 | 金 | NaN | 都内 | 50 | 女性 | NaN | NaN | NaN | NaN | NaN | 1.0 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 132 132.0 | 130001 | 東京都 | NaN | 2020-03-21 | 土 | NaN | 都内 | 50 | 男性 | NaN | NaN | NaN | NaN | NaN | NaN | . 133 133.0 | 130001 | 東京都 | NaN | 2020-03-21 | 土 | NaN | 都内 | 30 | 男性 | NaN | NaN | NaN | NaN | NaN | NaN | . 134 134.0 | 130001 | 東京都 | NaN | 2020-03-21 | 土 | NaN | 都内 | 50 | 男性 | NaN | NaN | NaN | NaN | NaN | NaN | . 135 135.0 | 130001 | 東京都 | NaN | 2020-03-21 | 土 | NaN | 都内 | 40 | 男性 | NaN | NaN | NaN | NaN | NaN | NaN | . 136 136.0 | 130001 | 東京都 | NaN | 2020-03-21 | 土 | NaN | 都内 | 40 | 男性 | NaN | NaN | NaN | NaN | NaN | NaN | . 136 rows × 16 columns . alt.Chart(df).mark_line().encode( alt.X(&quot;公表_年月日&quot;), y=&#39;count()&#39;, ) . df2 = df[[&#39;No&#39;]] df2[&#39;date&#39;] = pd.to_datetime(df[&#39;公表_年月日&#39;]) df2 = df2.set_index(&#39;date&#39;) df2 = df2.resample(&#39;1D&#39;).count() df2[&#39;date&#39;] = df2.index df2 . No date . date . 2020-01-24 1 | 2020-01-24 | . 2020-01-25 1 | 2020-01-25 | . 2020-01-26 0 | 2020-01-26 | . 2020-01-27 0 | 2020-01-27 | . 2020-01-28 0 | 2020-01-28 | . 2020-01-29 0 | 2020-01-29 | . 2020-01-30 1 | 2020-01-30 | . 2020-01-31 0 | 2020-01-31 | . 2020-02-01 0 | 2020-02-01 | . 2020-02-02 0 | 2020-02-02 | . 2020-02-03 0 | 2020-02-03 | . 2020-02-04 0 | 2020-02-04 | . 2020-02-05 0 | 2020-02-05 | . 2020-02-06 0 | 2020-02-06 | . 2020-02-07 0 | 2020-02-07 | . 2020-02-08 0 | 2020-02-08 | . 2020-02-09 0 | 2020-02-09 | . 2020-02-10 0 | 2020-02-10 | . 2020-02-11 0 | 2020-02-11 | . 2020-02-12 0 | 2020-02-12 | . 2020-02-13 1 | 2020-02-13 | . 2020-02-14 2 | 2020-02-14 | . 2020-02-15 8 | 2020-02-15 | . 2020-02-16 5 | 2020-02-16 | . 2020-02-17 0 | 2020-02-17 | . 2020-02-18 3 | 2020-02-18 | . 2020-02-19 3 | 2020-02-19 | . 2020-02-20 0 | 2020-02-20 | . 2020-02-21 3 | 2020-02-21 | . 2020-02-22 1 | 2020-02-22 | . 2020-02-23 0 | 2020-02-23 | . 2020-02-24 3 | 2020-02-24 | . 2020-02-25 0 | 2020-02-25 | . 2020-02-26 3 | 2020-02-26 | . 2020-02-27 1 | 2020-02-27 | . 2020-02-28 0 | 2020-02-28 | . 2020-02-29 1 | 2020-02-29 | . 2020-03-01 2 | 2020-03-01 | . 2020-03-02 0 | 2020-03-02 | . 2020-03-03 1 | 2020-03-03 | . 2020-03-04 4 | 2020-03-04 | . 2020-03-05 8 | 2020-03-05 | . 2020-03-06 6 | 2020-03-06 | . 2020-03-07 6 | 2020-03-07 | . 2020-03-08 0 | 2020-03-08 | . 2020-03-09 0 | 2020-03-09 | . 2020-03-10 3 | 2020-03-10 | . 2020-03-11 6 | 2020-03-11 | . 2020-03-12 2 | 2020-03-12 | . 2020-03-13 2 | 2020-03-13 | . 2020-03-14 10 | 2020-03-14 | . 2020-03-15 3 | 2020-03-15 | . 2020-03-16 0 | 2020-03-16 | . 2020-03-17 12 | 2020-03-17 | . 2020-03-18 9 | 2020-03-18 | . 2020-03-19 7 | 2020-03-19 | . 2020-03-20 11 | 2020-03-20 | . 2020-03-21 7 | 2020-03-21 | . alt.Chart(df2).mark_bar().encode( x=&#39;date:T&#39;, y=&#39;No:Q&#39;, ) . alt.Chart(df).mark_bar().encode( alt.X(&quot;年代&quot;, bin=True), y=&#39;count()&#39;, ) . alt.Chart(df).mark_bar().encode( alt.X(&quot;性別&quot;), y=&#39;count()&#39;, ) . &#27425;&#12395;&#26908;&#35342;&#12377;&#12427;&#12371;&#12392; . [] 日本全国のデータと比較する | [] 世界のデータをもとに死者/人口で比較する | [] 病床数と入院数のエリアごとの可視化 | .",
            "url": "https://geeknees.github.io/fastpages/jupyter/covid-19/2020/03/22/COVID-19-TOKYO.html",
            "relUrl": "/jupyter/covid-19/2020/03/22/COVID-19-TOKYO.html",
            "date": " • Mar 22, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # Title &gt; Awesome summary - toc: true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://geeknees.github.io/fastpages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://geeknees.github.io/fastpages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "https://github.com/geeknees | https://medium.com/@geeknees | https://twitter.com/_geeknees | https://dribbble.com/geeknees | . This website is powered by fastpages [^1]. [^1]:a blogging platform that natively supports Jupyter notebooks in addition to other formats. .",
          "url": "https://geeknees.github.io/fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

}